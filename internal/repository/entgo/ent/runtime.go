// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/item"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/schema"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/tasktype"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/user"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	itemMixin := schema.Item{}.Mixin()
	itemMixinFields0 := itemMixin[0].Fields()
	itemFields := schema.Item{}.Fields()
	_ = itemFields
	// itemDescCreateTime is the schema descriptor for create_time field.
	itemDescCreateTime := itemMixinFields0[0].Descriptor()
	// item.DefaultCreateTime holds the default value on creation for the create_time field.
	item.DefaultCreateTime = itemDescCreateTime.Default.(func() time.Time)
	// itemDescUpdateTime is the schema descriptor for update_time field.
	itemDescUpdateTime := itemMixinFields0[1].Descriptor()
	// item.DefaultUpdateTime holds the default value on creation for the update_time field.
	item.DefaultUpdateTime = itemDescUpdateTime.Default.(func() time.Time)
	// item.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	item.UpdateDefaultUpdateTime = itemDescUpdateTime.UpdateDefault.(func() time.Time)
	// itemDescSource is the schema descriptor for source field.
	itemDescSource := itemFields[0].Descriptor()
	// item.SourceValidator is a validator for the "source" field. It is called by the builders before save.
	item.SourceValidator = itemDescSource.Validators[0].(func(string) error)
	// itemDescHash is the schema descriptor for hash field.
	itemDescHash := itemFields[1].Descriptor()
	// item.HashValidator is a validator for the "hash" field. It is called by the builders before save.
	item.HashValidator = itemDescHash.Validators[0].(func(string) error)
	taskMixin := schema.Task{}.Mixin()
	taskMixinFields0 := taskMixin[0].Fields()
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescCreateTime is the schema descriptor for create_time field.
	taskDescCreateTime := taskMixinFields0[0].Descriptor()
	// task.DefaultCreateTime holds the default value on creation for the create_time field.
	task.DefaultCreateTime = taskDescCreateTime.Default.(func() time.Time)
	// taskDescUpdateTime is the schema descriptor for update_time field.
	taskDescUpdateTime := taskMixinFields0[1].Descriptor()
	// task.DefaultUpdateTime holds the default value on creation for the update_time field.
	task.DefaultUpdateTime = taskDescUpdateTime.Default.(func() time.Time)
	// task.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	task.UpdateDefaultUpdateTime = taskDescUpdateTime.UpdateDefault.(func() time.Time)
	// taskDescSlug is the schema descriptor for slug field.
	taskDescSlug := taskFields[0].Descriptor()
	// task.SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	task.SlugValidator = taskDescSlug.Validators[0].(func(string) error)
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[1].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = taskDescTitle.Validators[0].(func(string) error)
	// taskDescCode is the schema descriptor for code field.
	taskDescCode := taskFields[3].Descriptor()
	// task.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	task.CodeValidator = taskDescCode.Validators[0].(func(string) error)
	// taskDescActive is the schema descriptor for active field.
	taskDescActive := taskFields[4].Descriptor()
	// task.DefaultActive holds the default value on creation for the active field.
	task.DefaultActive = taskDescActive.Default.(bool)
	tasktypeFields := schema.TaskType{}.Fields()
	_ = tasktypeFields
	// tasktypeDescCode is the schema descriptor for code field.
	tasktypeDescCode := tasktypeFields[0].Descriptor()
	// tasktype.CodeValidator is a validator for the "code" field. It is called by the builders before save.
	tasktype.CodeValidator = tasktypeDescCode.Validators[0].(func(string) error)
	// tasktypeDescTitle is the schema descriptor for title field.
	tasktypeDescTitle := tasktypeFields[1].Descriptor()
	// tasktype.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	tasktype.TitleValidator = tasktypeDescTitle.Validators[0].(func(string) error)
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreateTime is the schema descriptor for create_time field.
	userDescCreateTime := userMixinFields0[0].Descriptor()
	// user.DefaultCreateTime holds the default value on creation for the create_time field.
	user.DefaultCreateTime = userDescCreateTime.Default.(func() time.Time)
	// userDescUpdateTime is the schema descriptor for update_time field.
	userDescUpdateTime := userMixinFields0[1].Descriptor()
	// user.DefaultUpdateTime holds the default value on creation for the update_time field.
	user.DefaultUpdateTime = userDescUpdateTime.Default.(func() time.Time)
	// user.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	user.UpdateDefaultUpdateTime = userDescUpdateTime.UpdateDefault.(func() time.Time)
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescService is the schema descriptor for service field.
	userDescService := userFields[3].Descriptor()
	// user.DefaultService holds the default value on creation for the service field.
	user.DefaultService = userDescService.Default.(bool)
}
