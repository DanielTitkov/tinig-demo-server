// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/systemsummary"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// SystemSummaryCreate is the builder for creating a SystemSummary entity.
type SystemSummaryCreate struct {
	config
	mutation *SystemSummaryMutation
	hooks    []Hook
}

// SetCreateTime sets the create_time field.
func (ssc *SystemSummaryCreate) SetCreateTime(t time.Time) *SystemSummaryCreate {
	ssc.mutation.SetCreateTime(t)
	return ssc
}

// SetNillableCreateTime sets the create_time field if the given value is not nil.
func (ssc *SystemSummaryCreate) SetNillableCreateTime(t *time.Time) *SystemSummaryCreate {
	if t != nil {
		ssc.SetCreateTime(*t)
	}
	return ssc
}

// SetUsers sets the users field.
func (ssc *SystemSummaryCreate) SetUsers(i int) *SystemSummaryCreate {
	ssc.mutation.SetUsers(i)
	return ssc
}

// SetTasks sets the tasks field.
func (ssc *SystemSummaryCreate) SetTasks(i int) *SystemSummaryCreate {
	ssc.mutation.SetTasks(i)
	return ssc
}

// SetActiveTasks sets the active_tasks field.
func (ssc *SystemSummaryCreate) SetActiveTasks(i int) *SystemSummaryCreate {
	ssc.mutation.SetActiveTasks(i)
	return ssc
}

// SetItems sets the items field.
func (ssc *SystemSummaryCreate) SetItems(i int) *SystemSummaryCreate {
	ssc.mutation.SetItems(i)
	return ssc
}

// SetAvgItemsPerTask sets the avg_items_per_task field.
func (ssc *SystemSummaryCreate) SetAvgItemsPerTask(f float64) *SystemSummaryCreate {
	ssc.mutation.SetAvgItemsPerTask(f)
	return ssc
}

// Mutation returns the SystemSummaryMutation object of the builder.
func (ssc *SystemSummaryCreate) Mutation() *SystemSummaryMutation {
	return ssc.mutation
}

// Save creates the SystemSummary in the database.
func (ssc *SystemSummaryCreate) Save(ctx context.Context) (*SystemSummary, error) {
	if err := ssc.preSave(); err != nil {
		return nil, err
	}
	var (
		err  error
		node *SystemSummary
	)
	if len(ssc.hooks) == 0 {
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SystemSummaryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ssc.mutation = mutation
			node, err = ssc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			mut = ssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SystemSummaryCreate) SaveX(ctx context.Context) *SystemSummary {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ssc *SystemSummaryCreate) preSave() error {
	if _, ok := ssc.mutation.CreateTime(); !ok {
		v := systemsummary.DefaultCreateTime()
		ssc.mutation.SetCreateTime(v)
	}
	if _, ok := ssc.mutation.Users(); !ok {
		return &ValidationError{Name: "users", err: errors.New("ent: missing required field \"users\"")}
	}
	if _, ok := ssc.mutation.Tasks(); !ok {
		return &ValidationError{Name: "tasks", err: errors.New("ent: missing required field \"tasks\"")}
	}
	if _, ok := ssc.mutation.ActiveTasks(); !ok {
		return &ValidationError{Name: "active_tasks", err: errors.New("ent: missing required field \"active_tasks\"")}
	}
	if _, ok := ssc.mutation.Items(); !ok {
		return &ValidationError{Name: "items", err: errors.New("ent: missing required field \"items\"")}
	}
	if _, ok := ssc.mutation.AvgItemsPerTask(); !ok {
		return &ValidationError{Name: "avg_items_per_task", err: errors.New("ent: missing required field \"avg_items_per_task\"")}
	}
	return nil
}

func (ssc *SystemSummaryCreate) sqlSave(ctx context.Context) (*SystemSummary, error) {
	ss, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ss.ID = int(id)
	return ss, nil
}

func (ssc *SystemSummaryCreate) createSpec() (*SystemSummary, *sqlgraph.CreateSpec) {
	var (
		ss    = &SystemSummary{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: systemsummary.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: systemsummary.FieldID,
			},
		}
	)
	if value, ok := ssc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: systemsummary.FieldCreateTime,
		})
		ss.CreateTime = value
	}
	if value, ok := ssc.mutation.Users(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: systemsummary.FieldUsers,
		})
		ss.Users = value
	}
	if value, ok := ssc.mutation.Tasks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: systemsummary.FieldTasks,
		})
		ss.Tasks = value
	}
	if value, ok := ssc.mutation.ActiveTasks(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: systemsummary.FieldActiveTasks,
		})
		ss.ActiveTasks = value
	}
	if value, ok := ssc.mutation.Items(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: systemsummary.FieldItems,
		})
		ss.Items = value
	}
	if value, ok := ssc.mutation.AvgItemsPerTask(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: systemsummary.FieldAvgItemsPerTask,
		})
		ss.AvgItemsPerTask = value
	}
	return ss, _spec
}

// SystemSummaryCreateBulk is the builder for creating a bulk of SystemSummary entities.
type SystemSummaryCreateBulk struct {
	config
	builders []*SystemSummaryCreate
}

// Save creates the SystemSummary entities in the database.
func (sscb *SystemSummaryCreateBulk) Save(ctx context.Context) ([]*SystemSummary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SystemSummary, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				if err := builder.preSave(); err != nil {
					return nil, err
				}
				mutation, ok := m.(*SystemSummaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (sscb *SystemSummaryCreateBulk) SaveX(ctx context.Context) []*SystemSummary {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
