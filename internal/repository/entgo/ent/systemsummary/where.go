// Code generated by entc, DO NOT EDIT.

package systemsummary

import (
	"time"

	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// Users applies equality check predicate on the "users" field. It's identical to UsersEQ.
func Users(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsers), v))
	})
}

// Tasks applies equality check predicate on the "tasks" field. It's identical to TasksEQ.
func Tasks(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTasks), v))
	})
}

// ActiveTasks applies equality check predicate on the "active_tasks" field. It's identical to ActiveTasksEQ.
func ActiveTasks(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActiveTasks), v))
	})
}

// Items applies equality check predicate on the "items" field. It's identical to ItemsEQ.
func Items(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItems), v))
	})
}

// AvgItemsPerTask applies equality check predicate on the "avg_items_per_task" field. It's identical to AvgItemsPerTaskEQ.
func AvgItemsPerTask(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvgItemsPerTask), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UsersEQ applies the EQ predicate on the "users" field.
func UsersEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsers), v))
	})
}

// UsersNEQ applies the NEQ predicate on the "users" field.
func UsersNEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsers), v))
	})
}

// UsersIn applies the In predicate on the "users" field.
func UsersIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUsers), v...))
	})
}

// UsersNotIn applies the NotIn predicate on the "users" field.
func UsersNotIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUsers), v...))
	})
}

// UsersGT applies the GT predicate on the "users" field.
func UsersGT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsers), v))
	})
}

// UsersGTE applies the GTE predicate on the "users" field.
func UsersGTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsers), v))
	})
}

// UsersLT applies the LT predicate on the "users" field.
func UsersLT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsers), v))
	})
}

// UsersLTE applies the LTE predicate on the "users" field.
func UsersLTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsers), v))
	})
}

// TasksEQ applies the EQ predicate on the "tasks" field.
func TasksEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTasks), v))
	})
}

// TasksNEQ applies the NEQ predicate on the "tasks" field.
func TasksNEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTasks), v))
	})
}

// TasksIn applies the In predicate on the "tasks" field.
func TasksIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTasks), v...))
	})
}

// TasksNotIn applies the NotIn predicate on the "tasks" field.
func TasksNotIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTasks), v...))
	})
}

// TasksGT applies the GT predicate on the "tasks" field.
func TasksGT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTasks), v))
	})
}

// TasksGTE applies the GTE predicate on the "tasks" field.
func TasksGTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTasks), v))
	})
}

// TasksLT applies the LT predicate on the "tasks" field.
func TasksLT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTasks), v))
	})
}

// TasksLTE applies the LTE predicate on the "tasks" field.
func TasksLTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTasks), v))
	})
}

// ActiveTasksEQ applies the EQ predicate on the "active_tasks" field.
func ActiveTasksEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldActiveTasks), v))
	})
}

// ActiveTasksNEQ applies the NEQ predicate on the "active_tasks" field.
func ActiveTasksNEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldActiveTasks), v))
	})
}

// ActiveTasksIn applies the In predicate on the "active_tasks" field.
func ActiveTasksIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldActiveTasks), v...))
	})
}

// ActiveTasksNotIn applies the NotIn predicate on the "active_tasks" field.
func ActiveTasksNotIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldActiveTasks), v...))
	})
}

// ActiveTasksGT applies the GT predicate on the "active_tasks" field.
func ActiveTasksGT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldActiveTasks), v))
	})
}

// ActiveTasksGTE applies the GTE predicate on the "active_tasks" field.
func ActiveTasksGTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldActiveTasks), v))
	})
}

// ActiveTasksLT applies the LT predicate on the "active_tasks" field.
func ActiveTasksLT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldActiveTasks), v))
	})
}

// ActiveTasksLTE applies the LTE predicate on the "active_tasks" field.
func ActiveTasksLTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldActiveTasks), v))
	})
}

// ItemsEQ applies the EQ predicate on the "items" field.
func ItemsEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldItems), v))
	})
}

// ItemsNEQ applies the NEQ predicate on the "items" field.
func ItemsNEQ(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldItems), v))
	})
}

// ItemsIn applies the In predicate on the "items" field.
func ItemsIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldItems), v...))
	})
}

// ItemsNotIn applies the NotIn predicate on the "items" field.
func ItemsNotIn(vs ...int) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldItems), v...))
	})
}

// ItemsGT applies the GT predicate on the "items" field.
func ItemsGT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldItems), v))
	})
}

// ItemsGTE applies the GTE predicate on the "items" field.
func ItemsGTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldItems), v))
	})
}

// ItemsLT applies the LT predicate on the "items" field.
func ItemsLT(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldItems), v))
	})
}

// ItemsLTE applies the LTE predicate on the "items" field.
func ItemsLTE(v int) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldItems), v))
	})
}

// AvgItemsPerTaskEQ applies the EQ predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskEQ(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvgItemsPerTask), v))
	})
}

// AvgItemsPerTaskNEQ applies the NEQ predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskNEQ(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvgItemsPerTask), v))
	})
}

// AvgItemsPerTaskIn applies the In predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskIn(vs ...float64) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAvgItemsPerTask), v...))
	})
}

// AvgItemsPerTaskNotIn applies the NotIn predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskNotIn(vs ...float64) predicate.SystemSummary {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SystemSummary(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAvgItemsPerTask), v...))
	})
}

// AvgItemsPerTaskGT applies the GT predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskGT(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvgItemsPerTask), v))
	})
}

// AvgItemsPerTaskGTE applies the GTE predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskGTE(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvgItemsPerTask), v))
	})
}

// AvgItemsPerTaskLT applies the LT predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskLT(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvgItemsPerTask), v))
	})
}

// AvgItemsPerTaskLTE applies the LTE predicate on the "avg_items_per_task" field.
func AvgItemsPerTaskLTE(v float64) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvgItemsPerTask), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.SystemSummary) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.SystemSummary) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SystemSummary) predicate.SystemSummary {
	return predicate.SystemSummary(func(s *sql.Selector) {
		p(s.Not())
	})
}
