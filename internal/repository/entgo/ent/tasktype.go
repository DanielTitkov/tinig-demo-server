// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/tasktype"
	"github.com/facebook/ent/dialect/sql"
)

// TaskType is the model entity for the TaskType schema.
type TaskType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskTypeQuery when eager-loading is set.
	Edges TaskTypeEdges `json:"edges"`
}

// TaskTypeEdges holds the relations/edges for other nodes in the graph.
type TaskTypeEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskTypeEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // code
		&sql.NullString{}, // title
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskType fields.
func (tt *TaskType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tasktype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	tt.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[0])
	} else if value.Valid {
		tt.Code = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[1])
	} else if value.Valid {
		tt.Title = value.String
	}
	return nil
}

// QueryTasks queries the tasks edge of the TaskType.
func (tt *TaskType) QueryTasks() *TaskQuery {
	return (&TaskTypeClient{config: tt.config}).QueryTasks(tt)
}

// Update returns a builder for updating this TaskType.
// Note that, you need to call TaskType.Unwrap() before calling this method, if this TaskType
// was returned from a transaction, and the transaction was committed or rolled back.
func (tt *TaskType) Update() *TaskTypeUpdateOne {
	return (&TaskTypeClient{config: tt.config}).UpdateOne(tt)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (tt *TaskType) Unwrap() *TaskType {
	tx, ok := tt.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskType is not a transactional entity")
	}
	tt.config.driver = tx.drv
	return tt
}

// String implements the fmt.Stringer.
func (tt *TaskType) String() string {
	var builder strings.Builder
	builder.WriteString("TaskType(")
	builder.WriteString(fmt.Sprintf("id=%v", tt.ID))
	builder.WriteString(", code=")
	builder.WriteString(tt.Code)
	builder.WriteString(", title=")
	builder.WriteString(tt.Title)
	builder.WriteByte(')')
	return builder.String()
}

// TaskTypes is a parsable slice of TaskType.
type TaskTypes []*TaskType

func (tt TaskTypes) config(cfg config) {
	for _i := range tt {
		tt[_i].config = cfg
	}
}
