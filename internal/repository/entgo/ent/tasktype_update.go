// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/predicate"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/task"
	"github.com/DanielTitkov/tinig-demo-server/internal/repository/entgo/ent/tasktype"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// TaskTypeUpdate is the builder for updating TaskType entities.
type TaskTypeUpdate struct {
	config
	hooks      []Hook
	mutation   *TaskTypeMutation
	predicates []predicate.TaskType
}

// Where adds a new predicate for the builder.
func (ttu *TaskTypeUpdate) Where(ps ...predicate.TaskType) *TaskTypeUpdate {
	ttu.predicates = append(ttu.predicates, ps...)
	return ttu
}

// SetCode sets the code field.
func (ttu *TaskTypeUpdate) SetCode(s string) *TaskTypeUpdate {
	ttu.mutation.SetCode(s)
	return ttu
}

// SetTitle sets the title field.
func (ttu *TaskTypeUpdate) SetTitle(s string) *TaskTypeUpdate {
	ttu.mutation.SetTitle(s)
	return ttu
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (ttu *TaskTypeUpdate) AddTaskIDs(ids ...int) *TaskTypeUpdate {
	ttu.mutation.AddTaskIDs(ids...)
	return ttu
}

// AddTasks adds the tasks edges to Task.
func (ttu *TaskTypeUpdate) AddTasks(t ...*Task) *TaskTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.AddTaskIDs(ids...)
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttu *TaskTypeUpdate) Mutation() *TaskTypeMutation {
	return ttu.mutation
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (ttu *TaskTypeUpdate) RemoveTaskIDs(ids ...int) *TaskTypeUpdate {
	ttu.mutation.RemoveTaskIDs(ids...)
	return ttu
}

// RemoveTasks removes tasks edges to Task.
func (ttu *TaskTypeUpdate) RemoveTasks(t ...*Task) *TaskTypeUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ttu *TaskTypeUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ttu.mutation.Code(); ok {
		if err := tasktype.CodeValidator(v); err != nil {
			return 0, &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if v, ok := ttu.mutation.Title(); ok {
		if err := tasktype.TitleValidator(v); err != nil {
			return 0, &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ttu.hooks) == 0 {
		affected, err = ttu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttu.mutation = mutation
			affected, err = ttu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ttu.hooks) - 1; i >= 0; i-- {
			mut = ttu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *TaskTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *TaskTypeUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *TaskTypeUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttu *TaskTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktype.Table,
			Columns: tasktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktype.FieldID,
			},
		},
	}
	if ps := ttu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ttu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldCode,
		})
	}
	if value, ok := ttu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldTitle,
		})
	}
	if nodes := ttu.mutation.RemovedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktype.TasksTable,
			Columns: []string{tasktype.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktype.TasksTable,
			Columns: []string{tasktype.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TaskTypeUpdateOne is the builder for updating a single TaskType entity.
type TaskTypeUpdateOne struct {
	config
	hooks    []Hook
	mutation *TaskTypeMutation
}

// SetCode sets the code field.
func (ttuo *TaskTypeUpdateOne) SetCode(s string) *TaskTypeUpdateOne {
	ttuo.mutation.SetCode(s)
	return ttuo
}

// SetTitle sets the title field.
func (ttuo *TaskTypeUpdateOne) SetTitle(s string) *TaskTypeUpdateOne {
	ttuo.mutation.SetTitle(s)
	return ttuo
}

// AddTaskIDs adds the tasks edge to Task by ids.
func (ttuo *TaskTypeUpdateOne) AddTaskIDs(ids ...int) *TaskTypeUpdateOne {
	ttuo.mutation.AddTaskIDs(ids...)
	return ttuo
}

// AddTasks adds the tasks edges to Task.
func (ttuo *TaskTypeUpdateOne) AddTasks(t ...*Task) *TaskTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.AddTaskIDs(ids...)
}

// Mutation returns the TaskTypeMutation object of the builder.
func (ttuo *TaskTypeUpdateOne) Mutation() *TaskTypeMutation {
	return ttuo.mutation
}

// RemoveTaskIDs removes the tasks edge to Task by ids.
func (ttuo *TaskTypeUpdateOne) RemoveTaskIDs(ids ...int) *TaskTypeUpdateOne {
	ttuo.mutation.RemoveTaskIDs(ids...)
	return ttuo
}

// RemoveTasks removes tasks edges to Task.
func (ttuo *TaskTypeUpdateOne) RemoveTasks(t ...*Task) *TaskTypeUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ttuo.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ttuo *TaskTypeUpdateOne) Save(ctx context.Context) (*TaskType, error) {
	if v, ok := ttuo.mutation.Code(); ok {
		if err := tasktype.CodeValidator(v); err != nil {
			return nil, &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if v, ok := ttuo.mutation.Title(); ok {
		if err := tasktype.TitleValidator(v); err != nil {
			return nil, &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}

	var (
		err  error
		node *TaskType
	)
	if len(ttuo.hooks) == 0 {
		node, err = ttuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ttuo.mutation = mutation
			node, err = ttuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ttuo.hooks) - 1; i >= 0; i-- {
			mut = ttuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ttuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) SaveX(ctx context.Context) *TaskType {
	tt, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return tt
}

// Exec executes the query on the entity.
func (ttuo *TaskTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *TaskTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ttuo *TaskTypeUpdateOne) sqlSave(ctx context.Context) (tt *TaskType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tasktype.Table,
			Columns: tasktype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tasktype.FieldID,
			},
		},
	}
	id, ok := ttuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing TaskType.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ttuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldCode,
		})
	}
	if value, ok := ttuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tasktype.FieldTitle,
		})
	}
	if nodes := ttuo.mutation.RemovedTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktype.TasksTable,
			Columns: []string{tasktype.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tasktype.TasksTable,
			Columns: []string{tasktype.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: task.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	tt = &TaskType{config: ttuo.config}
	_spec.Assign = tt.assignValues
	_spec.ScanValues = tt.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tasktype.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return tt, nil
}
